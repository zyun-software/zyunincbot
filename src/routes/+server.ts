import { TG_TOKEN, URL_PANEL } from '$env/static/private';
import {
	calculateBalance,
	findTransactionById,
	findUserById,
	findUserByNickname,
	getRandomQuote,
	insertUser,
	moneySupply,
	telegram,
	transferMoney,
	updateUser
} from '$lib/server';
import { text } from '@sveltejs/kit';

export async function POST({ request }) {
	const token = request.headers.get('x-telegram-bot-api-secret-token') ?? '';

	if (TG_TOKEN !== token) {
		return text('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É');
	}

	const data = await request.json();

	const chat_id = data?.message?.from?.id ?? null;

	if (chat_id === null) {
		return text('–ù–µ–≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ user id');
	}

	const user = await findUserById(chat_id);
	if (user === null) {
		await telegram('sendMessage', {
			chat_id,
			text: `üîí –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ, –≤–∞—à –∫–æ–¥: <code>${chat_id}</code>`,
			parse_mode: 'HTML',
			reply_markup: {
				remove_keyboard: true
			}
		});

		return text('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ');
	}

	if (user.banned) {
		await telegram('sendMessage', {
			chat_id,
			text: '‚õîÔ∏è –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ',
			reply_markup: {
				remove_keyboard: true
			}
		});

		return text('–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ');
	}

	const showPanel = async (chat_id: string) =>
		await telegram('setChatMenuButton', {
			chat_id,
			menu_button: {
				type: 'web_app',
				text: '–ö–æ—Ä–ø–æ—Ä–∞—Ü—ñ—è',
				web_app: {
					url: URL_PANEL
				}
			}
		});

	if (user.admin && data?.message?.text) {
		const registerMatches = data.message.text.match(/^–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ ([a-zA-Z0-9_]{1,16}) (\d+)$/);
		if (registerMatches) {
			const findByNickname = await findUserByNickname(registerMatches[1]);
			const findById = await findUserById(registerMatches[2]);
			if (!findById && !findByNickname) {
				await insertUser({
					id: registerMatches[2],
					nickname: registerMatches[1]
				});

				await showPanel(registerMatches[2]);

				await telegram('sendMessage', {
					chat_id: registerMatches[2],
					text: `üîê –í–∞—Å —â–æ–π–Ω–æ –±—É–ª–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ –ø—ñ–¥ –ø—Å–µ–≤–¥–æ–Ω—ñ–º–æ–º: <code>${registerMatches[1]}</code>`,
					parse_mode: 'HTML'
				});

				await telegram('sendMessage', {
					chat_id,
					text: `‚úÖ <code>${registerMatches[1]}</code> –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ`,
					parse_mode: 'HTML'
				});

				return text('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—è');
			}
		}

		const renameMatches = data.message.text.match(
			/^–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ ([a-zA-Z0-9_]{1,16}) ([a-zA-Z0-9_]{1,16})$/
		);
		if (renameMatches) {
			const findCur = await findUserByNickname(renameMatches[1]);
			const findRe = await findUserByNickname(renameMatches[2]);
			if (findCur && !findRe) {
				const oldNickname = findCur.nickname;
				findCur.nickname = renameMatches[2];
				await updateUser(findCur);

				await telegram('sendMessage', {
					chat_id: findCur.id,
					text: `‚úçüèª –í–∞—à –ø—Å–µ–≤–¥–æ–Ω—ñ–º –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <code>${renameMatches[2]}</code>`,
					parse_mode: 'HTML'
				});

				await telegram('sendMessage', {
					chat_id,
					text: `‚úÖ –ü—Å–µ–≤–¥–æ–Ω—ñ–º <code>${oldNickname}</code> –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <code>${renameMatches[2]}</code>`,
					parse_mode: 'HTML'
				});

				return text('–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è');
			}
		}

		const blockMatches = data.message.text.match(/^(–ó–∞|–†–æ–∑)–±–ª–æ–∫—É–≤–∞—Ç–∏ ([a-zA-Z0-9_]{1,16})$/);
		if (blockMatches) {
			const find = await findUserByNickname(blockMatches[2]);
			if (find && !find.admin) {
				find.banned = /^–ó/.test(data.message.text);
				await updateUser(find);

				if (find.banned) {
					await telegram('setChatMenuButton', {
						chat_id: find.id,
						menu_button: {
							type: 'default'
						}
					});
				} else {
					await showPanel(find.id);
				}

				await telegram('sendMessage', {
					chat_id: find.id,
					text: `${find.banned ? '‚õî' : 'üîì'} –í–∞—Å –±—É–ª–æ ${find.banned ? '–∑–∞' : '—Ä–æ–∑'}–±–ª–æ–∫–æ–≤–∞–Ω–æ`
				});

				await telegram('sendMessage', {
					chat_id,
					text: `${find.banned ? '‚õî' : 'üîì'} <code>${find.nickname}</code> ${
						find.banned ? '–∑–∞' : '—Ä–æ–∑'
					}–±–ª–æ–∫–æ–≤–∞–Ω–æ`,
					parse_mode: 'HTML'
				});

				return text('–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è');
			}
		}

		const calcMatches = data.message.text.match(/^–ë—é–¥–∂–µ—Ç( \d+:\d+:\d+:\d+:\d+)+$/);
		if (calcMatches) {
			const amount = await moneySupply();

			const sum = data.message.text
				.replace('–ë—é–¥–∂–µ—Ç ', '')
				.split(' ')
				.reduce((a: number, c: string) => {
					const [stackBlocks, blocks, stacks, items, cource] = c.split(':');

					const res =
						(parseInt(stackBlocks) * 64 * 9 +
							parseInt(blocks) * 9 +
							parseInt(stacks) * 64 +
							parseInt(items)) *
						parseInt(cource);

					return a + res;
				}, 0);

			const need = sum - amount;

			await telegram('sendMessage', {
				chat_id,
				text:
					`üí∞ –ì—Ä–æ—à–æ–≤–∞ –º–∞—Å–∞: <code>${amount}</code> ‚Ç¥\n` +
					`üè¶ –í –±–∞–Ω–∫—É: <code>${sum}</code> ‚Ç¥\n` +
					`${
						need === 0
							? '‚öñÔ∏è –§—ñ–Ω–∞–Ω—Å–∏ –∑–±–∞–ª–∞–Ω—Å–æ–≤–∞–Ω—ñ'
							: need < 0
							? `üìâ –î–µ—Ñ—ñ—Ü–∏—Ç: <code>${Math.abs(need)}</code> ‚Ç¥`
							: `üìà –ü—Ä–æ—Ñ—ñ—Ü–∏—Ç: <code>${need}</code> ‚Ç¥`
					}`,
				parse_mode: 'HTML'
			});
			return text('–ë—é–¥–∂–µ—Ç');
		}

		const transferMoneyMatches = data.message.text.match(
			/^–ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ ([a-zA-Z0-9_]{1,16}) (\d+)( .+)?/
		);

		if (transferMoneyMatches) {
			const amount = parseInt(transferMoneyMatches[2]);
			const receiver = await findUserByNickname(transferMoneyMatches[1]);
			if (amount > 0 && receiver) {
				const comment = data.message.text.replace(
					`–ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ ${transferMoneyMatches[1]} ${transferMoneyMatches[2]}`,
					''
				);
				const transaction = await transferMoney(null, receiver.id, amount, comment);
				if (transaction && transaction.status === 'SUCCESS') {
					await telegram('sendMessage', {
						chat_id,
						text: `‚úÖ <code>${receiver.nickname}</code> –±—É–ª–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ <code>${amount}</code> ‚Ç¥, –∫–æ–¥ <code>${transaction.transaction_id}</code>`,
						parse_mode: 'HTML'
					});
					return text('–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π –≥—Ä–∞–≤—Ü—é');
				}
			}
		}

		const removeBusinnessMatches = data.message.text.match(
			/^–ü—Ä–∏–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –±—ñ–∑–Ω–µ—Å—É ([a-zA-Z0-9_]{1,16})/
		);
		if (removeBusinnessMatches) {
			const find = await findUserByNickname(removeBusinnessMatches[1]);
			if (find) {
				find.emoji = null;
				find.business_name = null;
				await updateUser(find);
				await telegram('sendMessage', {
					chat_id,
					text: `‚úÖ –£ <code>${find.nickname}</code> –±—É–ª–æ –ø—Ä–∏–±—Ä–∞–Ω–æ –±—ñ–∑–Ω–µ—Å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é`,
					parse_mode: 'HTML'
				});
				return text('–ü—Ä–∏–±—Ä–∞—Ç–∏ –±—ñ–∑–Ω–µ—Å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é');
			}
		}

		const balanceMatches = data.message.text.match(/^–ë–∞–ª–∞–Ω—Å ([a-zA-Z0-9_]{1,16})/);
		if (balanceMatches) {
			const find = await findUserByNickname(balanceMatches[1]);
			if (find) {
				const balance = await calculateBalance(find.id);
				await telegram('sendMessage', {
					chat_id,
					text: `‚úÖ –ë–∞–ª–∞–Ω—Å <code>${find.nickname}</code> —Å–∫–ª–∞–¥–∞—î <code>${balance}</code> ‚Ç¥`,
					parse_mode: 'HTML'
				});
				return text('–ü–µ—Ä–µ–≥–ª—è–≥—É—Ç–∏ –±–∞–ª–∞–Ω—Å –∫–ª—ñ—î–Ω—Ç–∞');
			}
		}

		const addBusinnessMatches = data.message.text.match(
			/^–î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –±—ñ–∑–Ω–µ—Å—É ([a-zA-Z0-9_]{1,16}) (.+) (.+)/
		);
		if (addBusinnessMatches) {
			const find = await findUserByNickname(addBusinnessMatches[1]);
			if (find) {
				find.emoji = addBusinnessMatches[2];
				find.business_name = addBusinnessMatches[3];
				await updateUser(find);
				await telegram('sendMessage', {
					chat_id,
					text: `‚úÖ –£ <code>${find.nickname}</code> –±—É–ª–æ –¥–æ–¥–∞–Ω–æ –±—ñ–∑–Ω–µ—Å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é`,
					parse_mode: 'HTML'
				});
				return text('–î–æ–¥–∞—Ç–∏ –±—ñ–∑–Ω–µ—Å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é');
			}
		}

		const transactionMatches = data.message.text.match(/^–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è (\d+)/);
		if (transactionMatches) {
			const transaction = await findTransactionById(transactionMatches[1]);
			if (transaction) {
				await telegram('sendMessage', {
					chat_id,
					text:
						`üì§ –í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: <code>${transaction.sender_nickname}</code>\n` +
						`üì• –û—Ç—Ä–∏–º—É–≤–∞—á: <code>${transaction.receiver_nickname}</code>\n` +
						`üìÖ –î–∞—Ç–∞: <code>${transaction.date_string}</code>\n` +
						`üí∞ –°—É–º–∞: <code>${transaction.amount}</code> ‚Ç¥\n` +
						`üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${transaction.comment}`,
					parse_mode: 'HTML'
				});
				return text('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é');
			}
		}

		if (data.message.text === '–î–æ–ø–æ–º–æ–≥–∞') {
			await telegram('sendMessage', {
				chat_id,
				text:
					'<code>–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏</code> [<i>–ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>] [<i>–∫–æ–¥</i>]\n' +
					'<code>–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏</code> [<i>—Å—Ç–∞—Ä–∏–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>] [<i>–Ω–æ–≤–∏–π –ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>]\n' +
					'<code>–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏</code> [<i>–ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>]\n' +
					'<code>–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏</code> [<i>–ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>]\n' +
					'<code>–ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏</code> [<i>–ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>] [<i>—Å—É–º–∞</i>]\n' +
					'<code>–ü—Ä–∏–±—Ä–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –±—ñ–∑–Ω–µ—Å—É</code> [<i>–ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>]\n' +
					'<code>–î–æ–¥–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –±—ñ–∑–Ω–µ—Å—É</code> [<i>–ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>] [<i>emoji</i>] [<i>–Ω–∞–∑–≤–∞ –±—ñ–∑–Ω–µ—Å—É</i>]\n' +
					'<code>–ë–∞–ª–∞–Ω—Å</code> [<i>–ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>]\n' +
					'<code>–ë—é–¥–∂–µ—Ç</code> [<i>—Å—Ç–∞–∫—ñ–≤ –±–ª–æ–∫—ñ–≤</i>:<i>–±–ª–æ–∫—ñ–≤</i>.<i>—Å—Ç–∞–∫—ñ–≤</i>:<i>–ø—Ä–µ–¥–º–µ—Ç—ñ–≤</i>]+\n' +
					'<code>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è</code> [<i>–ø—Å–µ–≤–¥–æ–Ω—ñ–º</i>]',
				parse_mode: 'HTML'
			});
			return text('–î–æ–ø–æ–º–æ–≥–∞');
		}
	}

	await showPanel(user.id);

	const quote = await getRandomQuote();

	await telegram('sendMessage', {
		chat_id,
		text:
			`üîç –î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –±—ñ–∑–Ω–µ—Å–∏, —â–æ –≤—Ö–æ–¥—è—Ç—å –¥–æ —Å–∫–ª–∞–¥—É <b>Zyun Inc ‚Ñ¢</b> —Ç–∞ —ó—Ö–Ω—é –¥—ñ—è–ª—å–Ω—ñ—Å—Ç—å.\n\n` +
			`üí¨ "<i>${quote}"</i>`,
		parse_mode: 'HTML',
		reply_markup: {
			inline_keyboard: [
				[
					{
						web_app: { url: URL_PANEL },
						text: 'üè¢ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ–º–ø–∞–Ω—ñ–π'
					}
				],
				[
					{
						web_app: { url: `${URL_PANEL}/api` },
						text: 'ü§ñ API'
					},
					{
						web_app: { url: `${URL_PANEL}/donate` },
						text: 'üí∏ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏'
					}
				]
			]
		}
	});

	return text('–≤–∏–∫–æ–Ω–∞–Ω–æ');
}
