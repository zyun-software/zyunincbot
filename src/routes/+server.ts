import { TG_TOKEN, URL_PANEL } from '$env/static/private';
import {
	findUserById,
	findUserByNickname,
	insertUser,
	telegram,
	transferMoney,
	updateUser
} from '$lib/server';
import { text } from '@sveltejs/kit';

export async function POST({ request }) {
	const token = request.headers.get('x-telegram-bot-api-secret-token') ?? '';

	if (TG_TOKEN !== token) {
		return text('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É');
	}

	const data = await request.json();

	const chat_id = data?.message?.from?.id ?? null;

	if (chat_id === null) {
		return text('–ù–µ–≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ user id');
	}

	const user = await findUserById(chat_id);
	if (user === null) {
		await telegram('sendMessage', {
			chat_id,
			text: `üîí –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ, –≤–∞—à –∫–æ–¥: <code>${chat_id}</code>`,
			parse_mode: 'HTML',
			reply_markup: {
				remove_keyboard: true
			}
		});

		return text('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ');
	}

	if (user.blocked) {
		await telegram('sendMessage', {
			chat_id,
			text: '‚õîÔ∏è –í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ',
			reply_markup: {
				remove_keyboard: true
			}
		});

		return text('–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ');
	}

	const showPanel = async (chat_id: string) =>
		await telegram('setChatMenuButton', {
			chat_id,
			menu_button: {
				type: 'web_app',
				text: 'Zyun –ë–∞–Ω–∫',
				web_app: {
					url: `${URL_PANEL}/bank`
				}
			}
		});

	if (user.admin && data.message) {
		const minecraftNicknameRegex = /^[a-zA-Z0-9_]{1,16}$/;

		const registerMatches = data.message.text.match(/^–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ (\w+) (\d+)$/);
		if (registerMatches && minecraftNicknameRegex.test(registerMatches[1])) {
			const findByNickname = await findUserByNickname(registerMatches[1]);
			const findById = await findUserById(registerMatches[2]);
			if (!findById && !findByNickname) {
				await insertUser({
					id: registerMatches[2],
					nickname: registerMatches[1]
				});

				await showPanel(registerMatches[2]);

				await telegram('sendMessage', {
					chat_id: registerMatches[2],
					text: `üîê –í–∞—Å —â–æ–π–Ω–æ –±—É–ª–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ –ø—ñ–¥ –ø—Å–µ–≤–¥–æ–Ω—ñ–º–æ–º: <code>${registerMatches[1]}</code>`,
					parse_mode: 'HTML'
				});

				await telegram('sendMessage', {
					chat_id,
					text: `‚úÖ <code>${registerMatches[1]}</code> –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ`,
					parse_mode: 'HTML'
				});

				return text('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≥—Ä–∞–≤—Ü—è');
			}
		}

		const renameMatches = data.message.text.match(/^–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ (\w+) (\w+)$/);
		if (
			renameMatches &&
			minecraftNicknameRegex.test(renameMatches[1]) &&
			minecraftNicknameRegex.test(renameMatches[2])
		) {
			const findCur = await findUserByNickname(renameMatches[1]);
			const findRe = await findUserByNickname(renameMatches[2]);
			if (findCur && !findRe) {
				const oldNickname = findCur.nickname;
				findCur.nickname = renameMatches[2];
				await updateUser(findCur);

				await telegram('sendMessage', {
					chat_id: findCur.id,
					text: `‚úçüèª –í–∞—à –ø—Å–µ–≤–¥–æ–Ω—ñ–º –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <code>${renameMatches[2]}</code>`,
					parse_mode: 'HTML'
				});

				await telegram('sendMessage', {
					chat_id,
					text: `‚úÖ –ü—Å–µ–≤–¥–æ–Ω—ñ–º <code>${oldNickname}</code> –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <code>${renameMatches[2]}</code>`,
					parse_mode: 'HTML'
				});

				return text('–ü–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è');
			}
		}

		const blockMatches = data.message.text.match(/^(–ó–∞|–†–æ–∑)–±–ª–æ–∫—É–≤–∞—Ç–∏ (\w+)$/);
		if (blockMatches && minecraftNicknameRegex.test(blockMatches[2])) {
			const find = await findUserByNickname(blockMatches[2]);
			if (find && !find.admin) {
				find.blocked = /^–ó/.test(data.message.text);
				await updateUser(find);

				if (find.blocked) {
					await telegram('setChatMenuButton', {
						chat_id: find.id,
						menu_button: {
							type: 'default'
						}
					});
				} else {
					await showPanel(find.id);
				}

				await telegram('sendMessage', {
					chat_id: find.id,
					text: `${find.blocked ? '‚õî' : 'üîì'} –í–∞—Å –±—É–ª–æ ${find.blocked ? '–∑–∞' : '—Ä–æ–∑'}–±–ª–æ–∫–æ–≤–∞–Ω–æ`
				});

				await telegram('sendMessage', {
					chat_id,
					text: `${find.blocked ? '‚õî' : 'üîì'} <code>${find.nickname}</code> ${
						find.blocked ? '–∑–∞' : '—Ä–æ–∑'
					}–±–ª–æ–∫–æ–≤–∞–Ω–æ`,
					parse_mode: 'HTML'
				});

				return text('–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è');
			}
		}

		const transferMoneyMatches = data.message.text.match(/^–ù–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ (\w+) (\d+)$/);
		if (transferMoneyMatches && minecraftNicknameRegex.test(transferMoneyMatches[1])) {
			const amount = parseInt(transferMoneyMatches[2]);
			const receiver = await findUserByNickname(transferMoneyMatches[1]);
			if (amount > 0 && receiver) {
				const transaction = await transferMoney(null, receiver.id, amount);
				if (transaction && transaction.status === 'SUCCESS') {
					await telegram('sendMessage', {
						chat_id,
						text: `‚úÖ <code>${receiver.nickname}</code> –±—É–ª–æ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ <code>${amount}</code> ‚Ç¥`,
						parse_mode: 'HTML'
					});
					return text('–ù–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –≥—Ä–æ—à–µ–π –≥—Ä–∞–≤—Ü—é');
				}
			}
		}
	}

	await showPanel(user.id);

	await telegram('sendMessage', {
		chat_id,
		text: `üëã –ü—Ä–∏–≤—ñ—Ç <code>${user.nickname}</code>, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É üéõÔ∏è <code>Zyun –ë–∞–Ω–∫</code> —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—å–æ–≥–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É`,
		parse_mode: 'HTML',
		reply_markup: {
			remove_keyboard: true
		}
	});

	return text('–≤–∏–∫–æ–Ω–∞–Ω–æ');
}
