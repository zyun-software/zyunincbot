import { MC_TOKEN, URL_PANEL } from '$env/static/private';
import {
	buyGoods,
	calculateBalance,
	findProductById,
	findUserById,
	findUserByNickname,
	getProduct,
	getProductCodes,
	getProductsByIds,
	getRandomQuote,
	getUsersIgnoreId,
	insertProduct,
	insertUser,
	minusQuantityProduct,
	moneySupply,
	pluseQuantityProduct,
	telegram,
	transferMoney
} from '$lib/server';
import { text } from '@sveltejs/kit';

export async function POST({ request }) {
	const token = request.headers.get('token') ?? '';

	if (token !== MC_TOKEN) {
		return text('–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç');
	}

	const command = {
		account: '—Ä–∞—Ö—É–Ω–æ–∫',
		goods: '—Ç–æ–≤–∞—Ä',
		basket: '–∫–æ—à–∏–∫',
		balance: '–±–∞–ª–∞–Ω—Å',
		transfer: '–ø–µ—Ä–µ–∫–∞–∑',
		add: '–¥–æ–¥–∞—Ç–∏',
		remove: '–ø—Ä–∏–±—Ä–∞—Ç–∏',
		cost: '–≤–∞—Ä—Ç—ñ—Å—Ç—å',
		cash: '–æ–ø–ª–∞—Ç–∞_–≥–æ—Ç—ñ–≤–∫–æ—é',
		buy: '–æ–ø–ª–∞—Ç–∞_–æ–Ω–ª–∞–π–Ω',
		register: '–∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è',
		money_supply: '–≥—Ä–æ—à–æ–≤–∞_–º–∞—Å–∞',
		create: '—Å—Ç–≤–æ—Ä–∏—Ç–∏'
	};

	const bank = 'Zyun_Bank';

	const data = await request.text();
	const parts = data.split('&&');

	if (data.match(/^tab/)) {
		const args = parts[2].split(' ');
		const user = await findUserByNickname(parts[1]);
		if (!user) {
			if (args.length === 1 && command.register.includes(args[0])) {
				return text(command.register);
			}
			if (args.length === 2 && args[0] === command.register) {
				return text('–ö–æ–¥ –∑ Telegram');
			}
			return text('–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ');
		}

		if (user.banned) {
			return text('–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ');
		}

		if (args.length === 1) {
			let list = [];

			for (const item of [command.account, command.goods, command.basket]) {
				if (item.includes(args[0])) {
					list.push(item);
				}
			}

			if (user.admin) {
				if (command.money_supply.includes(args[0])) {
					list.push(command.money_supply);
				}
			}

			return text(list.join('&'));
		}

		if (args.length === 2) {
			if (args[0] === command.account) {
				let list = [];

				for (const item of [command.balance, command.transfer]) {
					if (item.includes(args[1])) {
						list.push(item);
					}
				}

				if (args[1] === command.balance) {
					list.push('–í–∞—à –±–∞–ª–∞–Ω—Å –≤ Zyun –ë–∞–Ω–∫');
				}

				return text(list.join('&'));
			}

			if (args[0] === command.goods) {
				let list = [];

				for (const item of [command.add, command.remove, command.create]) {
					if (item.includes(args[1])) {
						list.push(item);
					}
				}

				if (args[1] === command.remove) {
					list.push('–¶–µ –ø—Ä–∏–±–µ—Ä–µ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ');
				}

				return text(list.join('&'));
			}

			if (args[0] === command.basket) {
				let list = [];

				for (const item of [command.cost, command.buy, command.cash]) {
					if (item.includes(args[1])) {
						list.push(item);
					}
				}

				if (args[1] === command.cost) {
					list.push('–ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ');
				}

				if (args[1] === command.buy) {
					list.push('–ü—Ä–∏–¥–±–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ —É —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ');
				}

				return text(list.join('&'));
			}
		}

		if (args.length === 3) {
			if (args[0] === command.account && args[1] === command.transfer) {
				let list = [];
				const users = await getUsersIgnoreId(user.id);

				if (bank.includes(args[2])) {
					list.push(bank);
				}

				for (const u of users) {
					const name = u.business_name ?? u.nickname;
					if (name.includes(args[2])) {
						list.push(name);
					}
				}

				return text(list.join('&'));
			}

			if (args[0] === command.goods && args[1] === command.add) {
				let list = [];
				const codes = await getProductCodes(user.id);

				for (const code of codes) {
					if (code.includes(args[2])) {
						list.push(code);
					}
				}

				const product = await getProduct(args[2]);
				if (product && product.user_id === user.id) {
					list.push(product.name);
				}

				return text(list.join('&'));
			}
		}

		if (args.length === 4) {
			if (args[0] === command.account && args[1] === command.transfer) {
				return text('–°—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É');
			}
		}

		if (args.length > 4 && args[0] === command.account && args[1] === command.transfer) {
			return text('–ö–æ–º–µ–Ω—Ç–∞—Ä');
		}

		if (args.length === 3 && args[0] === command.goods && args[1] === command.create) {
			return text('–¶—ñ–Ω–∞');
		}

		if (args.length > 3 && args[0] === command.goods && args[1] === command.create) {
			return text('–ù–∞–∑–≤–∞');
		}

		return text('–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
	}

	if (data.match(/^command/)) {
		const user = await findUserByNickname(parts[1]);
		if (!user) {
			const registerMatches = parts[3].match(new RegExp(`^${command.register} (\\d+)$`));
			if (registerMatches) {
				const findUser = await findUserById(registerMatches[1]);
				if (findUser) {
					return text('message&¬ßc–¶–µ–π –∫–æ–¥ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ');
				}

				await insertUser({ id: registerMatches[1], nickname: parts[1] });

				await telegram('setChatMenuButton', {
					chat_id: registerMatches[1],
					menu_button: {
						type: 'web_app',
						text: 'Zyun –ë–∞–Ω–∫',
						web_app: {
							url: `${URL_PANEL}/bank`
						}
					}
				});

				const quote = await getRandomQuote();

				await telegram('sendMessage', {
					chat_id: registerMatches[1],
					text: `üö™ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –º–µ–Ω—é –±–∞–Ω–∫—É\n\n` + `üí¨ "<i>${quote}"</i>`,
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									web_app: { url: `${URL_PANEL}/bank` },
									text: 'üè¶ Zyun –ë–∞–Ω–∫'
								}
							]
						]
					}
				});

				return text('message&¬ßa–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è –≤ —Å–∏—Å—Ç–µ–º—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ');
			}

			return text('message&¬ßc–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ');
		}

		if (user.banned) {
			return text('message&¬ßc–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ');
		}

		const stackInHand = parseInt(parts[2]);

		if (user.admin && parts[3] === command.money_supply) {
			const amount = await moneySupply();
			return text(
				`message&¬ßa–ì—Ä–æ—à–æ–≤–∞ –º–∞—Å–∞ —Å–∫–ª–∞–¥–∞—î: ¬ße${amount
					.toString()
					.replace(/(\d)(?=(\d{3})+$)/g, '$1.')} ¬ßa‚Ç¥`
			);
		}

		if (parts[3] === `${command.account} ${command.balance}`) {
			const balance = await calculateBalance(user.id);
			return text(
				`message&¬ßa–í–∞—à –±–∞–ª–∞–Ω—Å: ¬ße${balance.toString().replace(/(\d)(?=(\d{3})+$)/g, '$1.')} ¬ßa‚Ç¥`
			);
		}

		const transferMoneyMatches = parts[3].match(
			new RegExp(`^${command.account} ${command.transfer} ([^ ]{1,16}) (\\d+)( .*)?$`)
		);

		if (transferMoneyMatches) {
			let receiver = null;
			if (transferMoneyMatches[1] !== bank) {
				const receiverUser = await findUserByNickname(transferMoneyMatches[1]);
				if (receiverUser) {
					receiver = receiverUser.id;
				} else {
					receiver = '-1';
				}
			}

			const amount = parseInt(transferMoneyMatches[2]);

			const transaction = await transferMoney(
				user.id,
				receiver,
				amount,
				transferMoneyMatches[3] ?? ''
			);

			switch (transaction.status) {
				case 'SUCCESS':
					return text(
						`message&¬ßa–ü–µ—Ä–µ–∫–∞–∑ —É—Å–ø—ñ—à–Ω–∏–π, –∫–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó: ¬ße${transaction.transaction_id}`
					);
				case 'INVALID_AMOUNT':
					return text('message&¬ßc–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞ –ø–µ—Ä–µ–∫–∞–∑—É');
				case 'NO_COST':
					return text('message&¬ßc–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–∫–∞–∑—É');
				case 'RECEIVER_NOT_FOUND':
					return text('message&¬ßc–û—Ç—Ä–∏–º—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
				case 'RECEIVER_IS_BANNED':
					return text('message&¬ßc–û—Ç—Ä–∏–º—É–≤–∞—á–∞ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ');
				default:
					return text('message&¬ßc–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
			}
		}

		const addProductMatches = parts[3].match(
			new RegExp(`^${command.goods} ${command.add} (\\d+)$`)
		);
		if (addProductMatches) {
			const product = await findProductById(addProductMatches[1], user.id);
			if (!product) {
				return text('message&¬ßc–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
			}

			if (stackInHand !== product.stack) {
				return text(`message&¬ßc–°—Ç–∞–∫ —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É –ø–æ–≤–∏–Ω–µ–Ω –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ ¬ße${product.stack}`);
			}

			await pluseQuantityProduct(product.id, 1);

			return text(
				`setnbt&¬ß6¬ßl–¢–æ–≤–∞—Ä\`${user.business_name ?? user.nickname}:${
					product.id
				}&&message&¬ßa–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ`
			);
		}

		const removeProductsMatches = parts[3].match(
			new RegExp(`^${command.goods} ${command.remove}$`)
		);
		if (removeProductsMatches) {
			const lines = parts[4].split('``');
			if (lines.length === 1 && lines[0] === '') {
				return text('message&¬ßc–í—ñ–¥—Å—É—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
			}
			for (const line of lines) {
				if (!line.match(new RegExp(`${user.business_name ?? user.nickname}`))) {
					return text('message&¬ßc–£ –≤–∞—Å –≤ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—ñ —î –Ω–µ –≤–∞—à—ñ —Ç–æ–≤–∞—Ä–∏');
				}
			}

			return text('clearnbt&&message&¬ßa–¢–æ–≤–∞—Ä–∏ –ø—Ä–∏–±—Ä–∞–Ω–æ');
		}

		const getProducts = async () => {
			const lines = parts[4].split('``');
			if (lines.length === 1 && lines[0] === '') {
				return 'message&¬ßc–í—ñ–¥—Å—É—Ç–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –≤–∞—Ä—Ç–æ—Å—Ç—ñ';
			}

			const goods: { [k: string]: number } = {};

			for (const line of lines) {
				const [stack, lore] = line.split('&');
				const codeMatches = lore.match(/(\d+)$/);
				if (!codeMatches) {
					return 'message&¬ßc–ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–¥—É —Ç–æ–≤–∞—Ä–∞';
				}

				if (!(codeMatches[1] in goods)) {
					goods[codeMatches[1]] = 0;
				}

				goods[codeMatches[1]] += parseInt(stack);
			}

			const ids = Object.keys(goods);
			const products = await getProductsByIds(ids);

			if (products.length !== ids.length) {
				return 'message&¬ßc–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥—ñ';
			}

			for (const product of products) {
				if ((goods[product.id] ?? 1) % product.stack !== 0) {
					return `message&¬ßc–°—Ç–∞–∫ —Ç–æ–≤–∞—Ä—É –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ —Å—Ç–∞–∫—É –Ω–∞ —Å–∫–ª–∞–¥—ñ ¬ße${product.stack}¬ßc, –∫–æ–¥ ¬ße${product.id}`;
				}
			}

			return products.map((product) => {
				return {
					...product,
					amount: (goods[product.id] ?? 1) / product.stack
				};
			});
		};

		const costBasketMatches = parts[3].match(new RegExp(`^${command.basket} ${command.cost}$`));
		if (costBasketMatches) {
			const products = await getProducts();
			if (typeof products === 'string') {
				return text(products);
			}

			const amount = products.reduce((accumulator, currentItem) => {
				const product = currentItem.price * currentItem.amount * currentItem.stack;
				return accumulator + product;
			}, 0);

			return text(`message&¬ßa–°—É–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤ —Å–∫–ª–∞–¥–∞—î ¬ße${amount} ¬ßa‚Ç¥`);
		}

		const payBasketMatches = parts[3].match(new RegExp(`^${command.basket} ${command.buy}$`));
		if (payBasketMatches) {
			const products = await getProducts();
			if (typeof products === 'string') {
				return text(products);
			}

			for (const product of products) {
				if (product.user_id === user.id) {
					return text('message&¬ßc–ù–µ –º–æ–∂–Ω–∞ –∫—É–ø—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω—ñ —Ç–æ–≤–∞—Ä–∏');
				}
			}

			const buyResult = await buyGoods(
				products.map((product) => {
					return {
						id: product.id,
						quantity: product.amount
					};
				}),
				user
			);

			return text(
				`${buyResult.success ? 'clearnbt&&message&¬ßa' : 'message&¬ßc'}${buyResult.message}`
			);
		}

		const cashBasketMatches = parts[3].match(new RegExp(`^${command.basket} ${command.cash}$`));
		if (cashBasketMatches) {
			const products = await getProducts();
			if (typeof products === 'string') {
				return text(products);
			}

			for (const p of products) {
				if (p.user_id === user.id) {
					return text('message&¬ßc–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π —Ç–æ–≤–∞—Ä');
				}
			}

			const dd: {
				[id: string]: string[];
			} = {};

			for (const p of products) {
				await minusQuantityProduct(p.id, p.amount);
				if (!(p.user_id in dd)) {
					dd[p.user_id] = [];
				}
				dd[p.user_id].push(`${p.name} x${p.stack}, ${p.amount} —à—Ç.`);
			}

			for (const chat_id in dd) {
				const con = dd[chat_id].join(', ');
				await telegram('sendMessage', {
					chat_id,
					text: `üõç –ó–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —â–æ–π–Ω–æ —Ä–æ–∑—Ä–∞—Ö—É–≤–∞–≤—Å—è <code>${user.nickname}</code> –≥–æ—Ç—ñ–≤–∫–æ—é: ${con}`,
					parse_mode: 'HTML'
				});
			}

			return text('clearnbt&&message&¬ßa–¢–æ–≤–∞—Ä–∏ –ø—Ä–∏–¥–±–∞–Ω–æ');
		}

		const createMatches = parts[3].match(
			new RegExp(`^${command.goods} ${command.create} (\\d+) (.+)$`)
		);
		if (createMatches) {
			const price = parseInt(createMatches[1]);
			const name = createMatches[2];
			const id = await insertProduct({
				id: '',
				user_id: user.id,
				name,
				description: '',
				stack: stackInHand,
				price: price,
				quantity: 1
			});

			if (id === null) {
				return text('message&¬ßc–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É');
			} else {
				return text(
					`setnbt&¬ß6¬ßl–¢–æ–≤–∞—Ä\`${user.business_name ?? user.nickname}:${id}&&message&¬ßa–¢–æ–≤–∞—Ä —Å—Ç–≤–æ—Ä–µ–Ω–æ`
				);
			}
		}
	}

	return text('message&¬ßc–ö–æ–º–∞–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
	//return text('clearnbt&&message&–¢–∏–ø—É —à–æ—Å—å —Å—Ç–∞–ª–æ—Å—è');
	//return text('setnbt&¬ß6¬ßl–¢–æ–≤–∞—Ä`Ziozyun:43&&message&–¢–∏–ø—É —à–æ—Å—å —Å—Ç–∞–ª–æ—Å—è');
}
